// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NetFerry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "NetFerry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace google {
namespace protobuf {
class PointDPSDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointDPS> {
} _PointDPS_default_instance_;
class PointMVDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointMV> {
} _PointMV_default_instance_;
class NetFerryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetFerry> {
} _NetFerry_default_instance_;

namespace protobuf_NetFerry_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _PointDPS_default_instance_.Shutdown();
  _PointMV_default_instance_.Shutdown();
  _NetFerry_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PointDPS_default_instance_.DefaultConstruct();
  _PointMV_default_instance_.DefaultConstruct();
  _NetFerry_default_instance_.DefaultConstruct();
  _NetFerry_default_instance_.get_mutable()->pointdps_ = const_cast< ::google::protobuf::PointDPS*>(
      ::google::protobuf::PointDPS::internal_default_instance());
  _NetFerry_default_instance_.get_mutable()->pointmv_ = const_cast< ::google::protobuf::PointMV*>(
      ::google::protobuf::PointMV::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_NetFerry_2eproto

bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointDPS::kDeviceIDFieldNumber;
const int PointDPS::kNameFieldNumber;
const int PointDPS::kTimestampFieldNumber;
const int PointDPS::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointDPS::PointDPS()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetFerry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.PointDPS)
}
PointDPS::PointDPS(const PointDPS& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PointDPS)
}

void PointDPS::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _cached_size_ = 0;
}

PointDPS::~PointDPS() {
  // @@protoc_insertion_point(destructor:google.protobuf.PointDPS)
  SharedDtor();
}

void PointDPS::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PointDPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PointDPS& PointDPS::default_instance() {
  protobuf_NetFerry_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointDPS* PointDPS::New(::google::protobuf::Arena* arena) const {
  PointDPS* n = new PointDPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointDPS::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PointDPS)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

bool PointDPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.PointDPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.PointDPS.deviceID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.PointDPS.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.PointDPS.timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.PointDPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.PointDPS)
  return false;
#undef DO_
}

void PointDPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.PointDPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.PointDPS.deviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.PointDPS.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.PointDPS.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestamp(), output);
  }

  // float value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.PointDPS)
}

size_t PointDPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PointDPS)
  size_t total_size = 0;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // float value = 4;
  if (this->value() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointDPS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointDPS*>(&from));
}

void PointDPS::MergeFrom(const PointDPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PointDPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void PointDPS::CopyFrom(const PointDPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PointDPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointDPS::IsInitialized() const {
  return true;
}

void PointDPS::Swap(PointDPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointDPS::InternalSwap(PointDPS* other) {
  deviceid_.Swap(&other->deviceid_);
  name_.Swap(&other->name_);
  timestamp_.Swap(&other->timestamp_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PointDPS::GetTypeName() const {
  return "google.protobuf.PointDPS";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointDPS

// string deviceID = 1;
void PointDPS::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointDPS::deviceid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointDPS.deviceID)
  return deviceid_.GetNoArena();
}
void PointDPS::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.PointDPS.deviceID)
}
#if LANG_CXX11
void PointDPS::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.protobuf.PointDPS.deviceID)
}
#endif
void PointDPS::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.PointDPS.deviceID)
}
void PointDPS::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.PointDPS.deviceID)
}
::std::string* PointDPS::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.PointDPS.deviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointDPS::release_deviceid() {
  // @@protoc_insertion_point(field_release:google.protobuf.PointDPS.deviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointDPS::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PointDPS.deviceID)
}

// string name = 2;
void PointDPS::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointDPS::name() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointDPS.name)
  return name_.GetNoArena();
}
void PointDPS::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.PointDPS.name)
}
#if LANG_CXX11
void PointDPS::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.protobuf.PointDPS.name)
}
#endif
void PointDPS::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.PointDPS.name)
}
void PointDPS::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.PointDPS.name)
}
::std::string* PointDPS::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.PointDPS.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointDPS::release_name() {
  // @@protoc_insertion_point(field_release:google.protobuf.PointDPS.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointDPS::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PointDPS.name)
}

// string timestamp = 3;
void PointDPS::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointDPS::timestamp() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointDPS.timestamp)
  return timestamp_.GetNoArena();
}
void PointDPS::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.PointDPS.timestamp)
}
#if LANG_CXX11
void PointDPS::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.protobuf.PointDPS.timestamp)
}
#endif
void PointDPS::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.PointDPS.timestamp)
}
void PointDPS::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.PointDPS.timestamp)
}
::std::string* PointDPS::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.PointDPS.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointDPS::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.protobuf.PointDPS.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointDPS::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PointDPS.timestamp)
}

// float value = 4;
void PointDPS::clear_value() {
  value_ = 0;
}
float PointDPS::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointDPS.value)
  return value_;
}
void PointDPS::set_value(float value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.PointDPS.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointMV::kDeviceIDFieldNumber;
const int PointMV::kNameFieldNumber;
const int PointMV::kTimestampFieldNumber;
const int PointMV::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointMV::PointMV()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetFerry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.PointMV)
}
PointMV::PointMV(const PointMV& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceid().size() > 0) {
    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.timestamp().size() > 0) {
    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.PointMV)
}

void PointMV::SharedCtor() {
  deviceid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _cached_size_ = 0;
}

PointMV::~PointMV() {
  // @@protoc_insertion_point(destructor:google.protobuf.PointMV)
  SharedDtor();
}

void PointMV::SharedDtor() {
  deviceid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PointMV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PointMV& PointMV::default_instance() {
  protobuf_NetFerry_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointMV* PointMV::New(::google::protobuf::Arena* arena) const {
  PointMV* n = new PointMV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointMV::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.PointMV)
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
}

bool PointMV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.PointMV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.PointMV.deviceID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.PointMV.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.protobuf.PointMV.timestamp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.PointMV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.PointMV)
  return false;
#undef DO_
}

void PointMV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.PointMV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.PointMV.deviceID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceid(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.PointMV.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.protobuf.PointMV.timestamp");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->timestamp(), output);
  }

  // int32 value = 4;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.PointMV)
}

size_t PointMV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.PointMV)
  size_t total_size = 0;

  // string deviceID = 1;
  if (this->deviceid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceid());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string timestamp = 3;
  if (this->timestamp().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->timestamp());
  }

  // int32 value = 4;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointMV::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointMV*>(&from));
}

void PointMV::MergeFrom(const PointMV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.PointMV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceid().size() > 0) {

    deviceid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceid_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.timestamp().size() > 0) {

    timestamp_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.timestamp_);
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void PointMV::CopyFrom(const PointMV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.PointMV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointMV::IsInitialized() const {
  return true;
}

void PointMV::Swap(PointMV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointMV::InternalSwap(PointMV* other) {
  deviceid_.Swap(&other->deviceid_);
  name_.Swap(&other->name_);
  timestamp_.Swap(&other->timestamp_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PointMV::GetTypeName() const {
  return "google.protobuf.PointMV";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointMV

// string deviceID = 1;
void PointMV::clear_deviceid() {
  deviceid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointMV::deviceid() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointMV.deviceID)
  return deviceid_.GetNoArena();
}
void PointMV::set_deviceid(const ::std::string& value) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.PointMV.deviceID)
}
#if LANG_CXX11
void PointMV::set_deviceid(::std::string&& value) {
  
  deviceid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.protobuf.PointMV.deviceID)
}
#endif
void PointMV::set_deviceid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.PointMV.deviceID)
}
void PointMV::set_deviceid(const char* value, size_t size) {
  
  deviceid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.PointMV.deviceID)
}
::std::string* PointMV::mutable_deviceid() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.PointMV.deviceID)
  return deviceid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointMV::release_deviceid() {
  // @@protoc_insertion_point(field_release:google.protobuf.PointMV.deviceID)
  
  return deviceid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointMV::set_allocated_deviceid(::std::string* deviceid) {
  if (deviceid != NULL) {
    
  } else {
    
  }
  deviceid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deviceid);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PointMV.deviceID)
}

// string name = 2;
void PointMV::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointMV::name() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointMV.name)
  return name_.GetNoArena();
}
void PointMV::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.PointMV.name)
}
#if LANG_CXX11
void PointMV::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.protobuf.PointMV.name)
}
#endif
void PointMV::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.PointMV.name)
}
void PointMV::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.PointMV.name)
}
::std::string* PointMV::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.PointMV.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointMV::release_name() {
  // @@protoc_insertion_point(field_release:google.protobuf.PointMV.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointMV::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PointMV.name)
}

// string timestamp = 3;
void PointMV::clear_timestamp() {
  timestamp_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PointMV::timestamp() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointMV.timestamp)
  return timestamp_.GetNoArena();
}
void PointMV::set_timestamp(const ::std::string& value) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.protobuf.PointMV.timestamp)
}
#if LANG_CXX11
void PointMV::set_timestamp(::std::string&& value) {
  
  timestamp_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.protobuf.PointMV.timestamp)
}
#endif
void PointMV::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.protobuf.PointMV.timestamp)
}
void PointMV::set_timestamp(const char* value, size_t size) {
  
  timestamp_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.protobuf.PointMV.timestamp)
}
::std::string* PointMV::mutable_timestamp() {
  
  // @@protoc_insertion_point(field_mutable:google.protobuf.PointMV.timestamp)
  return timestamp_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PointMV::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.protobuf.PointMV.timestamp)
  
  return timestamp_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PointMV::set_allocated_timestamp(::std::string* timestamp) {
  if (timestamp != NULL) {
    
  } else {
    
  }
  timestamp_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), timestamp);
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.PointMV.timestamp)
}

// int32 value = 4;
void PointMV::clear_value() {
  value_ = 0;
}
::google::protobuf::int32 PointMV::value() const {
  // @@protoc_insertion_point(field_get:google.protobuf.PointMV.value)
  return value_;
}
void PointMV::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.PointMV.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetFerry::kMsgTypeFieldNumber;
const int NetFerry::kPointDPSFieldNumber;
const int NetFerry::kPointMVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetFerry::NetFerry()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_NetFerry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.protobuf.NetFerry)
}
NetFerry::NetFerry(const NetFerry& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pointdps()) {
    pointdps_ = new ::google::protobuf::PointDPS(*from.pointdps_);
  } else {
    pointdps_ = NULL;
  }
  if (from.has_pointmv()) {
    pointmv_ = new ::google::protobuf::PointMV(*from.pointmv_);
  } else {
    pointmv_ = NULL;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:google.protobuf.NetFerry)
}

void NetFerry::SharedCtor() {
  ::memset(&pointdps_, 0, reinterpret_cast<char*>(&msgtype_) -
    reinterpret_cast<char*>(&pointdps_) + sizeof(msgtype_));
  _cached_size_ = 0;
}

NetFerry::~NetFerry() {
  // @@protoc_insertion_point(destructor:google.protobuf.NetFerry)
  SharedDtor();
}

void NetFerry::SharedDtor() {
  if (this != internal_default_instance()) {
    delete pointdps_;
  }
  if (this != internal_default_instance()) {
    delete pointmv_;
  }
}

void NetFerry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetFerry& NetFerry::default_instance() {
  protobuf_NetFerry_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetFerry* NetFerry::New(::google::protobuf::Arena* arena) const {
  NetFerry* n = new NetFerry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetFerry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.protobuf.NetFerry)
  if (GetArenaNoVirtual() == NULL && pointdps_ != NULL) {
    delete pointdps_;
  }
  pointdps_ = NULL;
  if (GetArenaNoVirtual() == NULL && pointmv_ != NULL) {
    delete pointmv_;
  }
  pointmv_ = NULL;
  msgtype_ = 0;
}

bool NetFerry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.protobuf.NetFerry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.MessageType msgType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_msgtype(static_cast< ::google::protobuf::MessageType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.PointDPS pointDPS = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointdps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.PointMV pointMV = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pointmv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.protobuf.NetFerry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.protobuf.NetFerry)
  return false;
#undef DO_
}

void NetFerry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.protobuf.NetFerry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.MessageType msgType = 1;
  if (this->msgtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msgtype(), output);
  }

  // .google.protobuf.PointDPS pointDPS = 2;
  if (this->has_pointdps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->pointdps_, output);
  }

  // .google.protobuf.PointMV pointMV = 3;
  if (this->has_pointmv()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pointmv_, output);
  }

  // @@protoc_insertion_point(serialize_end:google.protobuf.NetFerry)
}

size_t NetFerry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.protobuf.NetFerry)
  size_t total_size = 0;

  // .google.protobuf.PointDPS pointDPS = 2;
  if (this->has_pointdps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pointdps_);
  }

  // .google.protobuf.PointMV pointMV = 3;
  if (this->has_pointmv()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pointmv_);
  }

  // .google.protobuf.MessageType msgType = 1;
  if (this->msgtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetFerry::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetFerry*>(&from));
}

void NetFerry::MergeFrom(const NetFerry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.protobuf.NetFerry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pointdps()) {
    mutable_pointdps()->::google::protobuf::PointDPS::MergeFrom(from.pointdps());
  }
  if (from.has_pointmv()) {
    mutable_pointmv()->::google::protobuf::PointMV::MergeFrom(from.pointmv());
  }
  if (from.msgtype() != 0) {
    set_msgtype(from.msgtype());
  }
}

void NetFerry::CopyFrom(const NetFerry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.protobuf.NetFerry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetFerry::IsInitialized() const {
  return true;
}

void NetFerry::Swap(NetFerry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetFerry::InternalSwap(NetFerry* other) {
  std::swap(pointdps_, other->pointdps_);
  std::swap(pointmv_, other->pointmv_);
  std::swap(msgtype_, other->msgtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetFerry::GetTypeName() const {
  return "google.protobuf.NetFerry";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetFerry

// .google.protobuf.MessageType msgType = 1;
void NetFerry::clear_msgtype() {
  msgtype_ = 0;
}
::google::protobuf::MessageType NetFerry::msgtype() const {
  // @@protoc_insertion_point(field_get:google.protobuf.NetFerry.msgType)
  return static_cast< ::google::protobuf::MessageType >(msgtype_);
}
void NetFerry::set_msgtype(::google::protobuf::MessageType value) {
  
  msgtype_ = value;
  // @@protoc_insertion_point(field_set:google.protobuf.NetFerry.msgType)
}

// .google.protobuf.PointDPS pointDPS = 2;
bool NetFerry::has_pointdps() const {
  return this != internal_default_instance() && pointdps_ != NULL;
}
void NetFerry::clear_pointdps() {
  if (GetArenaNoVirtual() == NULL && pointdps_ != NULL) delete pointdps_;
  pointdps_ = NULL;
}
const ::google::protobuf::PointDPS& NetFerry::pointdps() const {
  // @@protoc_insertion_point(field_get:google.protobuf.NetFerry.pointDPS)
  return pointdps_ != NULL ? *pointdps_
                         : *::google::protobuf::PointDPS::internal_default_instance();
}
::google::protobuf::PointDPS* NetFerry::mutable_pointdps() {
  
  if (pointdps_ == NULL) {
    pointdps_ = new ::google::protobuf::PointDPS;
  }
  // @@protoc_insertion_point(field_mutable:google.protobuf.NetFerry.pointDPS)
  return pointdps_;
}
::google::protobuf::PointDPS* NetFerry::release_pointdps() {
  // @@protoc_insertion_point(field_release:google.protobuf.NetFerry.pointDPS)
  
  ::google::protobuf::PointDPS* temp = pointdps_;
  pointdps_ = NULL;
  return temp;
}
void NetFerry::set_allocated_pointdps(::google::protobuf::PointDPS* pointdps) {
  delete pointdps_;
  pointdps_ = pointdps;
  if (pointdps) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.NetFerry.pointDPS)
}

// .google.protobuf.PointMV pointMV = 3;
bool NetFerry::has_pointmv() const {
  return this != internal_default_instance() && pointmv_ != NULL;
}
void NetFerry::clear_pointmv() {
  if (GetArenaNoVirtual() == NULL && pointmv_ != NULL) delete pointmv_;
  pointmv_ = NULL;
}
const ::google::protobuf::PointMV& NetFerry::pointmv() const {
  // @@protoc_insertion_point(field_get:google.protobuf.NetFerry.pointMV)
  return pointmv_ != NULL ? *pointmv_
                         : *::google::protobuf::PointMV::internal_default_instance();
}
::google::protobuf::PointMV* NetFerry::mutable_pointmv() {
  
  if (pointmv_ == NULL) {
    pointmv_ = new ::google::protobuf::PointMV;
  }
  // @@protoc_insertion_point(field_mutable:google.protobuf.NetFerry.pointMV)
  return pointmv_;
}
::google::protobuf::PointMV* NetFerry::release_pointmv() {
  // @@protoc_insertion_point(field_release:google.protobuf.NetFerry.pointMV)
  
  ::google::protobuf::PointMV* temp = pointmv_;
  pointmv_ = NULL;
  return temp;
}
void NetFerry::set_allocated_pointmv(::google::protobuf::PointMV* pointmv) {
  delete pointmv_;
  pointmv_ = pointmv;
  if (pointmv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:google.protobuf.NetFerry.pointMV)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
